# ShadCN UI Workflow Rules

## 🎯 핵심 원칙
**ShadCN UI 관련 작업은 무조건 MCP 서버를 사용한다.**

## 📋 UI 기획 단계

### 1. 컴포넌트 탐색
- `list components`를 먼저 호출하여 사용 가능한 컴포넌트 목록을 확인
- `list blocks`를 호출하여 미리 구성된 블록이 있는지 확인
- **코드 대신 "컴포넌트 이름"과 "배치 위치"만 문서화**

### 2. 우선순위 결정
- **blocks가 있으면 단일 컴포넌트보다 blocks를 우선 사용**
- 복잡한 UI는 blocks 기반으로 확장

## 🛠️ 구현 단계

### 1. 예시 코드 확보
- `get component demo`를 먼저 호출하여 올바른 코드 예시를 확보
- 확보한 예시를 기반으로 구현

### 2. 구현 방식
- 단일 컴포넌트: `get component`로 소스 코드 확인
- 복잡한 UI: `get block`으로 전체 구조 파악 후 확장

## 🎨 스타일 변경

### 1. Tweak CN 테마 적용
- Tweak CN 테마를 설치 코드로 적용
- 자동 설치 실패 시, 제공된 설정값을 직접 반영

### 2. 테마 커스터마이징
- 색상, 폰트, 간격 등의 일관성 유지
- 프로젝트 디자인 시스템과의 통합

## 🔧 유지보수 & 검증

### 1. 품질 확인
- **반응형**: 다양한 화면 크기에서의 동작 확인
- **다크모드**: 테마 전환 시 스타일 일관성 확인
- **접근성**: 키보드 네비게이션, 스크린 리더 지원 확인

### 2. 문제 해결
- 문제가 생기면 MCP 서버를 다시 호출하여 최신 예시를 확인
- 컴포넌트 버전 호환성 검증

## 📚 사용 예시

### 컴포넌트 탐색
```
1. list components 호출
2. list blocks 호출 (있다면)
3. 필요한 컴포넌트/블록 식별
4. 배치 계획 문서화
```

### 구현 과정
```
1. get component demo 호출
2. 예시 코드 분석
3. 프로젝트에 맞게 수정
4. 스타일 및 기능 통합
```

## ⚠️ 주의사항

- MCP 서버 연결 상태 확인
- 컴포넌트 버전 호환성 검증
- 프로젝트 구조와의 일관성 유지
- 성능 최적화 고려

## 🚀 최종 목표

**ShadCN UI를 활용하여 일관성 있고 유지보수가 용이한 현대적인 UI 시스템 구축**
